{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/GianMarco/Desktop/React experiments/netflix_clone/netflix_clone/src/components/Banner.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport YouTube from \"react-youtube\";\nimport tmdbApi from \"../axios\";\nimport requests from \"../requests\";\nimport showTrailer from \"../showTrailer\";\nimport \"../Banner.css\";\nconst trailerOptions = {\n  height: \"390px\",\n  width: \"100%\",\n  playerVars: {\n    // https://developers.google.com/youtube/player_parameters\n    autoplay: 1\n  }\n};\n\nconst Banner = () => {\n  _s();\n\n  const [movie, setMovie] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    const fetchData = async () => {\n      const request = await tmdbApi.get(requests.fetchNetflixOriginals);\n      setMovie(request.data.results[Math.floor(Math.random() * request.data.results.length - 1)]);\n      return request;\n    };\n\n    fetchData();\n  }, []);\n\n  const handleClick = movie => {\n    showTrailer(movie, trailerUrl, setTrailerUrl);\n  };\n\n  const truncate = (str, n) => {\n    return (str === null || str === void 0 ? void 0 : str.length) > n ? str.substr(0, n - 1) + \"...\" : str;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"header\", {\n    className: \"banner\",\n    style: {\n      backgroundSize: \"cover\",\n      backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie === null || movie === void 0 ? void 0 : movie.backdrop_path}\")`,\n      backgroundPosition: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"banner__contents\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"banner__title\",\n        children: (movie === null || movie === void 0 ? void 0 : movie.title) || (movie === null || movie === void 0 ? void 0 : movie.name) || (movie === null || movie === void 0 ? void 0 : movie.original_name)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"banner__buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleClick(),\n          className: \"banner__button\",\n          children: \"Play\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"banner__button\",\n          children: \"My List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"banner__description\",\n        children: truncate(movie === null || movie === void 0 ? void 0 : movie.overview, 150)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"banner--fadeBottom\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: trailerOptions,\n      className: \"row__trailer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Banner, \"UbeID/ICDaJmiDThjhVI+mN+2n8=\");\n\n_c = Banner;\nexport default Banner; // x?.y means return null if x is null and x.y otherwise\n\nvar _c;\n\n$RefreshReg$(_c, \"Banner\");","map":{"version":3,"sources":["/Users/GianMarco/Desktop/React experiments/netflix_clone/netflix_clone/src/components/Banner.js"],"names":["React","useState","useEffect","YouTube","tmdbApi","requests","showTrailer","trailerOptions","height","width","playerVars","autoplay","Banner","movie","setMovie","trailerUrl","setTrailerUrl","fetchData","request","get","fetchNetflixOriginals","data","results","Math","floor","random","length","handleClick","truncate","str","n","substr","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport YouTube from \"react-youtube\";\n\nimport tmdbApi from \"../axios\";\nimport requests from \"../requests\";\nimport showTrailer from \"../showTrailer\";\nimport \"../Banner.css\";\n\nconst trailerOptions = {\n  height: \"390px\",\n  width: \"100%\",\n  playerVars: {\n    // https://developers.google.com/youtube/player_parameters\n    autoplay: 1,\n  },\n};\n\nconst Banner = () => {\n  const [movie, setMovie] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const request = await tmdbApi.get(requests.fetchNetflixOriginals);\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n      return request;\n    };\n    fetchData();\n  }, []);\n\n  const handleClick = (movie) => {\n    showTrailer(movie, trailerUrl, setTrailerUrl);\n  };\n\n  const truncate = (str, n) => {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  };\n\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n        backgroundPosition: \"center\",\n      }}\n    >\n      <div className=\"banner__contents\">\n        <h1 className=\"banner__title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n        <div className=\"banner__buttons\">\n          <button onClick={() => handleClick()} className=\"banner__button\">\n            Play\n          </button>\n          <button className=\"banner__button\">My List</button>\n        </div>\n\n        <h1 className=\"banner__description\">\n          {truncate(movie?.overview, 150)}\n        </h1>\n      </div>\n\n      <div className=\"banner--fadeBottom\" />\n      {trailerUrl && (\n        <YouTube\n          videoId={trailerUrl}\n          opts={trailerOptions}\n          className=\"row__trailer\"\n        />\n      )}\n    </header>\n  );\n};\n\nexport default Banner;\n\n// x?.y means return null if x is null and x.y otherwise\n"]},"metadata":{},"sourceType":"module"}