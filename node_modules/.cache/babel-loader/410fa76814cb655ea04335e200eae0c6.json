{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/GianMarco/Desktop/React experiments/netflix_clone/netflix_clone/src/components/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport YouTube from \"react-youtube\";\nimport tmdbApi from \"../axios\";\nimport \"../Row.css\";\nconst baseUrl = \"https://image.tmdb.org/t/p/original/\";\nconst trailerOptions = {\n  height: \"390\",\n  width: \"100%\",\n  playerVars: {\n    // https://developers.google.com/youtube/player_parameters\n    autoplay: 1\n  }\n};\n\nconst Row = ({\n  title,\n  fetchUrl,\n  isLargeRow\n}) => {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    const fetchData = async () => {\n      const request = await tmdbApi.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    };\n\n    fetchData();\n  }, [fetchUrl]);\n\n  const renderMovies = () => {\n    return movies.map(movie => {\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`\n        /*This sintax means: if there is the isLargeRow ADD THE FOLLOWING CLASS */\n        ,\n        src: `${baseUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: renderMovies()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: trailerOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/GianMarco/Desktop/React experiments/netflix_clone/netflix_clone/src/components/Row.js"],"names":["React","useState","useEffect","YouTube","tmdbApi","baseUrl","trailerOptions","height","width","playerVars","autoplay","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","renderMovies","map","movie","poster_path","backdrop_path","name","id"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,OAAO,YAAP;AAEA,MAAMC,OAAO,GAAG,sCAAhB;AACA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,KADa;AAErBC,EAAAA,KAAK,EAAE,MAFc;AAGrBC,EAAAA,UAAU,EAAE;AACV;AACAC,IAAAA,QAAQ,EAAE;AAFA;AAHS,CAAvB;;AASA,MAAMC,GAAG,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA;AAAnB,CAAD,KAAqC;AAAA;;AAC/C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACgB,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAAC,EAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,SAAS,GAAG,YAAY;AAC5B,YAAMC,OAAO,GAAG,MAAMhB,OAAO,CAACiB,GAAR,CAAYR,QAAZ,CAAtB;AACAG,MAAAA,SAAS,CAACI,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACD,KAJD;;AAKAD,IAAAA,SAAS;AACV,GAPQ,EAON,CAACN,QAAD,CAPM,CAAT;;AASA,QAAMW,YAAY,GAAG,MAAM;AACzB,WAAOT,MAAM,CAACU,GAAP,CAAYC,KAAD,IAAW;AAC3B,0BACE;AAEE,QAAA,SAAS,EAAG,eACVZ,UAAU,IAAI,kBACf;AAAG;AAJN;AAKE,QAAA,GAAG,EAAG,GAAET,OAAQ,GACdS,UAAU,GAAGY,KAAK,CAACC,WAAT,GAAuBD,KAAK,CAACE,aACxC,EAPH;AAQE,QAAA,GAAG,EAAEF,KAAK,CAACG;AARb,SACOH,KAAK,CAACI,EADb;AAAA;AAAA;AAAA;AAAA,cADF;AAYD,KAbM,CAAP;AAcD,GAfD;;AAiBA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,gBAAKlB;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBAA+BY,YAAY;AAA3C;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEP,UAAlB;AAA8B,MAAA,IAAI,EAAEX;AAApC;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CArCD;;GAAMK,G;;KAAAA,G;AAuCN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport YouTube from \"react-youtube\";\nimport tmdbApi from \"../axios\";\nimport \"../Row.css\";\n\nconst baseUrl = \"https://image.tmdb.org/t/p/original/\";\nconst trailerOptions = {\n  height: \"390\",\n  width: \"100%\",\n  playerVars: {\n    // https://developers.google.com/youtube/player_parameters\n    autoplay: 1,\n  },\n};\n\nconst Row = ({ title, fetchUrl, isLargeRow }) => {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const request = await tmdbApi.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    };\n    fetchData();\n  }, [fetchUrl]);\n\n  const renderMovies = () => {\n    return movies.map((movie) => {\n      return (\n        <img\n          key={movie.id}\n          className={`row__poster ${\n            isLargeRow && \"row__posterLarge\"\n          }`} /*This sintax means: if there is the isLargeRow ADD THE FOLLOWING CLASS */\n          src={`${baseUrl}${\n            isLargeRow ? movie.poster_path : movie.backdrop_path\n          }`}\n          alt={movie.name}\n        />\n      );\n    });\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row__posters\">{renderMovies()}</div>\n      <YouTube videoId={trailerUrl} opts={trailerOptions} />\n    </div>\n  );\n};\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}