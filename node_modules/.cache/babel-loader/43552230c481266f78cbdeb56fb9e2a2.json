{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/GianMarco/Desktop/React experiments/netflix_clone/netflix_clone/src/components/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport YouTube from \"react-youtube\";\nimport tmdbApi from \"../axios\";\nimport { getYoutubeId } from \"../showTrailer\";\nimport \"../Row.css\";\nconst baseUrl = \"https://image.tmdb.org/t/p/original/\";\nconst trailerOptions = {\n  height: \"390px\",\n  width: \"100%\",\n  playerVars: {\n    // https://developers.google.com/youtube/player_parameters\n    autoplay: 1\n  }\n};\n\nconst Row = ({\n  title,\n  fetchUrl,\n  isLargeRow\n}) => {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  const [overed, setOvered] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      const request = await tmdbApi.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    };\n\n    fetchData();\n  }, [fetchUrl]);\n\n  const handleClick = movie => {\n    getYoutubeId(movie, trailerUrl, setTrailerUrl);\n  };\n\n  const renderMovies = () => {\n    return movies.map(movie => {\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${baseUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name,\n        onClick: () => handleClick(movie)\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: renderMovies()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: trailerOptions,\n      className: \"row__trailer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Row, \"AHGMcT88IkxcNAjUyQHTcLsCJKI=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/GianMarco/Desktop/React experiments/netflix_clone/netflix_clone/src/components/Row.js"],"names":["React","useState","useEffect","YouTube","tmdbApi","getYoutubeId","baseUrl","trailerOptions","height","width","playerVars","autoplay","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","overed","setOvered","fetchData","request","get","data","results","handleClick","movie","renderMovies","map","poster_path","backdrop_path","name","id"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,OAAP,MAAoB,UAApB;AAEA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,OAAO,YAAP;AAEA,MAAMC,OAAO,GAAG,sCAAhB;AACA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,OADa;AAErBC,EAAAA,KAAK,EAAE,MAFc;AAGrBC,EAAAA,UAAU,EAAE;AACV;AACAC,IAAAA,QAAQ,EAAE;AAFA;AAHS,CAAvB;;AASA,MAAMC,GAAG,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA;AAAnB,CAAD,KAAqC;AAAA;;AAC/C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBhB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACiB,UAAD,EAAaC,aAAb,IAA8BlB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACmB,MAAD,EAASC,SAAT,IAAsBpB,QAAQ,CAAC,KAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMoB,SAAS,GAAG,YAAY;AAC5B,YAAMC,OAAO,GAAG,MAAMnB,OAAO,CAACoB,GAAR,CAAYV,QAAZ,CAAtB;AACAG,MAAAA,SAAS,CAACM,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACD,KAJD;;AAKAD,IAAAA,SAAS;AACV,GAPQ,EAON,CAACR,QAAD,CAPM,CAAT;;AASA,QAAMa,WAAW,GAAIC,KAAD,IAAW;AAC7BvB,IAAAA,YAAY,CAACuB,KAAD,EAAQV,UAAR,EAAoBC,aAApB,CAAZ;AACD,GAFD;;AAIA,QAAMU,YAAY,GAAG,MAAM;AACzB,WAAOb,MAAM,CAACc,GAAP,CAAYF,KAAD,IAAW;AAC3B,0BACE;AAEE,QAAA,SAAS,EAAG,eAAcb,UAAU,IAAI,kBAAmB,EAF7D;AAGE,QAAA,GAAG,EAAG,GAAET,OAAQ,GACdS,UAAU,GAAGa,KAAK,CAACG,WAAT,GAAuBH,KAAK,CAACI,aACxC,EALH;AAME,QAAA,GAAG,EAAEJ,KAAK,CAACK,IANb;AAOE,QAAA,OAAO,EAAE,MAAMN,WAAW,CAACC,KAAD;AAP5B,SACOA,KAAK,CAACM,EADb;AAAA;AAAA;AAAA;AAAA,cADF;AAWD,KAZM,CAAP;AAaD,GAdD;;AAgBA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,gBAAKrB;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBAA+BgB,YAAY;AAA3C;AAAA;AAAA;AAAA;AAAA,YAFF,EAGGX,UAAU,iBACT,QAAC,OAAD;AACE,MAAA,OAAO,EAAEA,UADX;AAEE,MAAA,IAAI,EAAEX,cAFR;AAGE,MAAA,SAAS,EAAC;AAHZ;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA/CD;;GAAMK,G;;KAAAA,G;AAiDN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport YouTube from \"react-youtube\";\nimport tmdbApi from \"../axios\";\n\nimport { getYoutubeId } from \"../showTrailer\";\n\nimport \"../Row.css\";\n\nconst baseUrl = \"https://image.tmdb.org/t/p/original/\";\nconst trailerOptions = {\n  height: \"390px\",\n  width: \"100%\",\n  playerVars: {\n    // https://developers.google.com/youtube/player_parameters\n    autoplay: 1,\n  },\n};\n\nconst Row = ({ title, fetchUrl, isLargeRow }) => {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  const [overed, setOvered] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const request = await tmdbApi.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    };\n    fetchData();\n  }, [fetchUrl]);\n\n  const handleClick = (movie) => {\n    getYoutubeId(movie, trailerUrl, setTrailerUrl);\n  };\n\n  const renderMovies = () => {\n    return movies.map((movie) => {\n      return (\n        <img\n          key={movie.id}\n          className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n          src={`${baseUrl}${\n            isLargeRow ? movie.poster_path : movie.backdrop_path\n          }`}\n          alt={movie.name}\n          onClick={() => handleClick(movie)}\n        />\n      );\n    });\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row__posters\">{renderMovies()}</div>\n      {trailerUrl && (\n        <YouTube\n          videoId={trailerUrl}\n          opts={trailerOptions}\n          className=\"row__trailer\"\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}