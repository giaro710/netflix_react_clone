{"version":3,"sources":["requests.js","axios.js","getYoutubeId.js","components/Row.js","components/Banner.js","components/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["API_KEY","process","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","tmdbApi","axios","create","baseURL","getYoutubeId","movie","trailerUrl","setTrailerUrl","movieTrailer","name","original_name","title","then","url","console","log","urlParams","URLSearchParams","URL","search","get","catch","error","trailerOptions","height","width","playerVars","autoplay","Row","fetchUrl","isLargeRow","useState","movies","setMovies","useEffect","a","request","data","results","fetchData","className","map","src","poster_path","backdrop_path","alt","onClick","handleClick","id","videoId","opts","Banner","setMovie","Math","floor","random","length","str","n","style","backgroundSize","backgroundImage","overview","substr","Navbar","show","setShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.37bbdb7b.chunk.js","sourcesContent":["const API_KEY = process.env.REACT_APP_TMDB_API_KEY;\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;\n","import axios from \"axios\";\n\nconst tmdbApi = axios.create({\n  baseURL: 'https://api.themoviedb.org/3'\n});\n\nexport default tmdbApi;\n","import movieTrailer from \"movie-trailer\";\n\nexport const getYoutubeId = (movie, trailerUrl, setTrailerUrl) => {\n  if (trailerUrl) {\n    setTrailerUrl(\"\");\n  } else {\n    movieTrailer(movie?.name || movie?.original_name || movie?.title)\n      .then((url) => {\n        console.log(url);\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get(\"v\"));\n      })\n      .catch((error) => console.log(error));\n  }\n};\n\n//  The movieTrailer library take a string and returns the path to the trailer (youtube)\n","import React, { useState, useEffect } from \"react\";\nimport YouTube from \"react-youtube\";\nimport tmdbApi from \"../axios\";\n\nimport { getYoutubeId } from \"../getYoutubeId\";\n\nimport \"../Row.css\";\n\nconst baseUrl = \"https://image.tmdb.org/t/p/original/\";\nconst trailerOptions = {\n  height: \"390px\",\n  width: \"100%\",\n  playerVars: {\n    // https://developers.google.com/youtube/player_parameters\n    autoplay: 1,\n  },\n};\n\nconst Row = ({ title, fetchUrl, isLargeRow }) => {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const request = await tmdbApi.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    };\n    fetchData();\n  }, [fetchUrl]);\n\n  const handleClick = (movie) => {\n    getYoutubeId(movie, trailerUrl, setTrailerUrl);\n  };\n\n  const renderMovies = () => {\n    return movies.map((movie) => {\n      return (\n        <img\n          key={movie.id}\n          className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n          src={`${baseUrl}${\n            isLargeRow ? movie.poster_path : movie.backdrop_path\n          }`}\n          alt={movie.name}\n          onClick={() => handleClick(movie)}\n        />\n      );\n    });\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row__posters\">{renderMovies()}</div>\n      {trailerUrl && (\n        <YouTube\n          videoId={trailerUrl}\n          opts={trailerOptions}\n          className=\"row__trailer\"\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Row;\n","import React, { useState, useEffect } from \"react\";\nimport YouTube from \"react-youtube\";\n\nimport tmdbApi from \"../axios\";\nimport requests from \"../requests\";\nimport { getYoutubeId } from \"../getYoutubeId\";\nimport \"../Banner.css\";\n\nconst trailerOptions = {\n  height: \"390px\",\n  width: \"100%\",\n  playerVars: {\n    // https://developers.google.com/youtube/player_parameters\n    autoplay: 1,\n  },\n};\n\nconst Banner = () => {\n  const [movie, setMovie] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const request = await tmdbApi.get(requests.fetchNetflixOriginals);\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n      return request;\n    };\n    fetchData();\n  }, []);\n\n  const handleClick = () => {\n    getYoutubeId(movie, trailerUrl, setTrailerUrl);\n  };\n\n  const truncate = (str, n) => {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  };\n\n  return (\n    <div>\n      <header\n        className=\"banner\"\n        style={{\n          backgroundSize: \"cover\",\n          backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n        }}\n      >\n        <div className=\"banner__contents\">\n          <h1 className=\"banner__title\">\n            {movie?.title || movie?.name || movie?.original_name}\n          </h1>\n          <div className=\"banner__buttons\">\n            <button onClick={() => handleClick()} className=\"banner__button\">\n              Play\n            </button>\n            <button className=\"banner__button\">My List</button>\n          </div>\n\n          <h1 className=\"banner__description\">\n            {truncate(movie?.overview, 150)}\n          </h1>\n        </div>\n\n        <div className=\"banner--fadeBottom\" />\n      </header>\n      {trailerUrl && (\n        <YouTube\n          videoId={trailerUrl}\n          opts={trailerOptions}\n          className=\"banner__trailer\"\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Banner;\n","import React, { useState, useEffect } from \"react\";\nimport \"../Navbar.css\";\n\nconst Navbar = () => {\n  const [show, setShow] = useState(false);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        setShow(true);\n      } else {\n        setShow(false);\n      }\n    });\n    return () => {\n      window.removeEventListener(\"scroll\");\n    };\n  }, []);\n\n  return (\n    <div className={`navbar ${show && \"nav__black\"}`}>\n      <img\n        className=\"navbar__logo\"\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1920px-Netflix_2015_logo.svg.png\"\n        alt=\"Netflix Logo\"\n      />\n      <img\n        className=\"navbar__avatar\"\n        src=\"https://mir-s3-cdn-cf.behance.net/project_modules/disp/366be133850498.56ba69ac36858.png\"\n        alt=\"Netflix Avatar\"\n      />\n    </div>\n  );\n};\n\nexport default Navbar;\n","import requests from \"./requests\";\nimport Row from \"./components/Row\";\nimport Banner from \"./components/Banner\";\nimport Navbar from \"./components/Navbar\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Navbar />\n      <Banner />\n      <Row\n        title=\"Netflix Originals\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title=\"Trending now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentary\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}